<!DOCTYPE html>
<html lang="en" data-bs-theme="light">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta content="width=device-width, initial-scale=1, maximum-scale=1, shrink-to-fit=no" name="viewport">
  <title><%= project_name %></title>
  <link rel="stylesheet" href="/css/bootstrap5.3.min.css">
  <link rel="stylesheet" href="/css/workspace_style.css">
  <link href='https://unpkg.com/boxicons@2.1.1/css/boxicons.min.css' rel='stylesheet'>
</head>
<body>
  <%- include('../partials/__side_navbar.ejs') %>

  <section class="dashboard">
    <%- include('../partials/__topbar.ejs') %>

    <div class="dash-content">
      <div class="mt-5 mb-5">
        <span class="text" id="workspace-title">WorkSpace Taskboard</span>
        <div class="float-end">
          <div class="dropdown">
            <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuButton2" data-bs-toggle="dropdown" aria-expanded="false"><i class="bx bx-menu icon"></i></button>
            <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton2">
              <li>
                <span class="dropdown-item" data-bs-toggle="modal" data-bs-target="#createTaskboardModal"><i class="bx bx-plus icon"></i> Create Taskboard</span>
              </li>
              <li><hr class="dropdown-divider"></li>
              <li>
                <span class="dropdown-item" data-bs-toggle="modal" data-bs-target="#updateWorkspaceModal"><i class="bx bx-edit icon"></i> Update WorkSpace</span>
              </li>
              <li>
                <span class="dropdown-item" data-bs-toggle="modal" data-bs-target="#updateWorkspaceModal"><i class="bx bx-edit icon"></i> Add Members</span>
              </li>
              <li>
                <span class="dropdown-item" data-bs-toggle="modal" data-bs-target="#deleteWorkspaceModal"><i class="bx bx-trash icon"></i> Delete WorkSpace</span>
              </li>
            </ul>
          </div>
        </div>
      </div>
      <div class="taskboard-row g-3" id="workspaceTaskBoard">
      </div>
    </div>
  </section>
  
  <div class="modal fade" id="createTaskboardModal" tabindex="-1" aria-labelledby="createTaskboardModal" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content">
        <div class="modal-header">
          <h1 class="modal-title fs-5" id="staticBackdropLabel">Create New Taskboard</h1>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <form class="needs-validation" id="createBoard">
            <div class="form-group mb-4">
              <label for="cTitle">Title</label>
              <input id="cTitle" type="text" class="form-control form-control-lg" name="cTitle" tabindex="1" required autofocus>
              <div class="cTitle invalid-feedback"></div>
            </div>
            <div class="form-group mb-4">
              <label for="cDescription">Description</label>
              <textarea id="cDescription" type="text" class="form-control form-control-lg" name="cDescription" tabindex="1"></textarea>
              <div class="cDescription invalid-feedback"></div>
            </div>
            <div class="form-group mb-4">
              <label for="cColor">Board Color</label>
              <input id="cColor" type="color" class="form-control form-control-lg" name="cColor" tabindex="1" value="#a1becd">
              <div class="cColor invalid-feedback"></div>
            </div>
            <div class="cError bg-danger text-white p-2 text-center d-none rounded mb-4"></div>
            <div class="cSuccess bg-success text-white p-2 text-center d-none rounded mb-4"></div>
            <div class="form-group">
              <button type="submit" class="btn btn-primary btn-lg btn-block" tabindex="4">Create</button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>

  <div class="modal fade" id="updateWorkspaceModal" tabindex="-1" aria-labelledby="updateModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content">
        <div class="modal-header">
          <h1 class="modal-title fs-5" id="staticBackdropLabel">Update Workspace</h1>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <form class="needs-validation">
            <div class="form-group mb-4">
              <label for="name">Name</label>
              <input id="name" type="text" class="form-control form-control-lg" name="name" tabindex="1" value="" required autofocus>
              <div class="name invalid-feedback"></div>
            </div>
            <div class="form-group mb-4">
              <label for="purpose">Purpose</label>
              <select name="purpose" id="purpose" class="form-control form-control-lg" tabindex="1" required>
                <option value="personal" selected>Personal</option>
                <option value="work">Work</option>
                <option value="school">School</option>
              </select>
              <div class="purpose invalid-feedback"></div>
            </div>
            <div class="error bg-danger text-white p-2 text-center d-none rounded mb-4"></div>
            <div class="success bg-success text-white p-2 text-center d-none rounded mb-4"></div>
            <div class="form-group">
                <button type="submit" class="btn btn-primary btn-lg btn-block" tabindex="4">Create</button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>

  <div class="modal fade" id="deleteWorkspaceModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content">
        <div class="modal-body">
          <div class="col-12 text-center">
            <h1 class="text-danger"><i class="bx bx-error icon"></i></h1>
            <h2>Delete WorkSpace</h2>
            <p>Deleting a workspace will delete all tasks in the workspace. Also the invited members will be removed from workspace.</p>
            <div class="form-group mb-4 mt-3 text-start">
              <label for="deleteWorkspace" class="fw-bolder">Enter the workspace name to proceed.</label>
              <input type="text" class="form-control form-control-lg" name="deleteWorkspace" id="deleteWorkspace" tabindex="1" required autofocus/>
              <div class="deleteWorkspace invalid-feedback"></div>
            </div>
          </div>
          <div class="error bg-danger text-white p-2 text-center d-none rounded mb-4"></div>
          <div class="success bg-success text-white p-2 text-center d-none rounded mb-4"></div>
          <div class="form-group">
            <span class="btn btn-danger btn-lg btn-block" tabindex="4">Delete</span>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script src="/js/bootstrap5.3.bundle.js"></script>
  <script src="/js/localStorage.js"></script>
  <script src="/js/app.js"></script>
  <script>
    const fetchWorkspaceDetails = async () => {
      const res = await fetch('/api/v1/workspace/<%=workspaceId%>', {
        method: 'GET',
        headers: { 
          'Content-Type':'application/json',
          'Authorization':`Bearer ${readFromLocal('token')}`
        }
      })
      checkAccess(res);

      const data = await res.json();
      if (data.workspace) {
        document.getElementById('workspace-title').innerText = `${data.workspace.name} Workspace`
        addToLocal('currentWorkspace', JSON.stringify(data.workspace))
      }
    }
    fetchWorkspaceDetails()
    
    const fetchWorkspaceTaskBoards = async () => {
      const res = await fetch('/api/v1/workspace/<%=workspaceId%>/taskboards', {
        method: 'GET',
        headers: { 
          'Content-Type':'application/json',
          'Authorization':`Bearer ${readFromLocal('token')}`
        }
      })
      checkAccess(res);

      const data = await res.json();
      if (data.taskboards) {
        let content = '';
        data.taskboards.map(taskboard => {
          content += `<div class="taskboard-col text-center">
                      <div class="p-3 rounded-4 tBbody" style="background-color: ${taskboard.color};">
                        <input type="hidden" class="taskboard-id" value="${taskboard._id}" />
                        <div>
                          <span class="workspace-title text-white">${taskboard.title}</span>
                        </div>
                        <div class="row mt-4 p-3 text-start font-monospace tlist">
                        </div>
                        <span class="btn btn-primary btn-sm mt-2 add-task"><i class="bx bx-plus icon"></i> Add Task</span>
                      </div>
                    </div>`
        })
        
        document.getElementById('workspaceTaskBoard').innerHTML += content
      }
    }
    fetchWorkspaceTaskBoards()

    const fetchTasks = async (taskboardId) => {
      const res = await fetch('/api/v1/task/<%=workspaceId%>', {
        method: 'GET',
        headers: { 
          'Content-Type':'application/json',
          'Authorization':`Bearer ${readFromLocal('token')}`
        }
      })
      checkAccess(res);

      const data = await res.json();
      if (data.workspace) {
        document.getElementById('workspace-title').innerText = `${data.workspace.name} Workspace`
        addToLocal('currentWorkspace', JSON.stringify(data.workspace))
      }
    }

    const creatBoardForm = document.querySelector('#createBoard')
    const nameErr = document.querySelector('.name.invalid-feedback')
    const colorErr = document.querySelector('.purpose.invalid-feedback')
    const errorDiv = document.querySelector('.error')
    const cSuccessDiv = document.querySelector('.cSuccess')

    creatBoardForm.addEventListener('submit', async (e) => {
      e.preventDefault();
      errorDiv.classList.add('d-none')
      cSuccessDiv.classList.add('d-none')
      
      nameErr.textContent = ''
      colorErr.textContent = ''
      errorDiv.textContent = ''
      cSuccessDiv.textContent = ''

      const req_body = JSON.stringify({ 
          title: creatBoardForm.cTitle.value,
          description: creatBoardForm.cDescription.value,
          color: creatBoardForm.cColor.value
      })

      try {
        const res = await fetch('/api/v1/workspace/<%=workspaceId%>/taskboards', {
          method: 'POST',
          body: req_body,
          headers: { 
            'Content-Type':'application/json',
            'Authorization':`Bearer ${readFromLocal('token')}`
          }
        })
        checkAccess(res);

        const data = await res.json();
        console.log(data)
        if (data.taskboard?._id) {
          let item = `<div class="col-4 d-inline text-center">
                      <div class="p-3 rounded-4 tBbody" style="background-color: ${data.taskboard.color};">
                        <input type="hidden" class="taskboard-id" value="${data.taskboard._id}" />
                        <div>
                          <span class="workspace-title text-white">${data.taskboard.title}</span>
                        </div>
                        <div class="row mt-4 p-3 text-start font-monospace tlist">
                        </div>
                        <span class="btn btn-primary btn-sm mt-2 add-task"><i class="bx bx-plus icon add-task"></i> Add Task</span>
                      </div>
                    </div>`
          
          document.getElementById('workspaceTaskBoard').innerHTML += item

          cSuccessDiv.classList.remove('d-none')
          cSuccessDiv.textContent = `CREATED: ${data.workspace.name}`
          setTimeout(() => {
            cSuccessDiv.classList.add('d-none')
          }, 2000);

          creatBoardForm.name.value = ''
          creatBoardForm.purpose.value = ''
        }
        if (data.error) {
            nameErr.textContent = data.error.name
            purposeErr.textContent = data.error.purpose
        }
      } catch (err) {
          console.log(err);
      }
    })
    
    const createOrUpdateTask = async (taskboardId, taskName, taskId) => {
      console.log(`creating task under ${taskboardId} with id ${taskId}`);
      
      const req_body = JSON.stringify({ 
        name: taskName,
        taskboardId
      })

      if (taskId) {
        console.log(`updating task id ${taskId}`);
        try {
          const res = await fetch(`/api/v1/task/${taskId}`, {
            method: 'PATCH',
            body: req_body,
            headers: { 
              'Content-Type':'application/json',
              'Authorization':`Bearer ${readFromLocal('token')}`
            }
          })
          checkAccess(res);

          const data = await res.json();
          console.log(data)
          if (data.task?._id) {
            return data.task
          }
          if (data.error) {
            console.log(`error ocurred: ${data.error}`);
            return data.error
          }
        } catch (err) {
            console.log(err);
        }
      }
      else {
        try {
          const res = await fetch('/api/v1/task', {
            method: 'POST',
            body: req_body,
            headers: { 
              'Content-Type':'application/json',
              'Authorization':`Bearer ${readFromLocal('token')}`
            }
          })
          checkAccess(res);

          const data = await res.json();
          console.log(data)
          if (data.task?._id) {
            return data.task
          }
          if (data.error) {
            console.log(`error ocurred: ${data.error}`);
            return data.error
          }
        } catch (err) {
            console.log(err);
        }
      }
    }

    const deleteTask = async (taskId) => {
      try {
        const res = await fetch(`/api/v1/task/${taskId}`, {
          method: 'DELETE',
          body: req_body,
          headers: { 
            'Content-Type':'application/json',
            'Authorization':`Bearer ${readFromLocal('token')}`
          }
        })
        checkAccess(res);

        const data = await res.json();
        console.log(data)
        if (data.error) {
          console.log(`error ocurred: ${data.error}`);
          // return data.error
        }
      } catch (err) {
        console.log(err)
      }
    }
  </script>
</body>
</html>